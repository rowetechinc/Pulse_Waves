<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	xmlns:extToolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
	xmlns:rti="clr-namespace:RTI"
    xmlns:pulse_display="clr-namespace:RTI;assembly=Pulse_Display">
	<!-- Resource dictionary entries should be defined here. -->
		
	<!--Global Background Color 121212 FF0C0A00 FF141414  FF0C0A00-->
	<SolidColorBrush x:Key="PulseBackgroundColor" Color="#FF0C0A00" />
	
	<!--Font Colors A8BECE B2D5F0 B2B3B4 FFECECEC 626262 748A9A 6B7984 887448 FF61A1C4 FF979797 FFAAAAAA FFCAC5C8 FFC5CFD1-->
	<SolidColorBrush x:Key="PulseFontColor" Color="#FFC5CFD1" />
	<SolidColorBrush x:Key="PulseTitleFontColor" Color="#FF979797" />
	<SolidColorBrush x:Key="PulseFontHighlightColor" Color="#FF61A1C4" />
	<SolidColorBrush x:Key="PulseFontBrightColor" Color="#FFD9E50F" />
	
	<!--Border 1 FF121212 #FF232222 FF1C272D FF171F27 FF2D2C2C FF262626 FF252525 FF3E3E3E-->
	<SolidColorBrush x:Key="PulseBorder1Color" Color="#FF252525" />
	
	<!--Back of Border 1 FF121212 FF141414 FF3E3E3E FF252525-->
	<SolidColorBrush x:Key="PulseBackBorder1Color" Color="#FF252525" />
	<!--FF232222-->
	<SolidColorBrush x:Key="PulseBackBorder2Color" Color="#FF141414" />
	<!-- #FF353536 #FF332E2B-->
	<SolidColorBrush x:Key="PulseBackBorder3Color" Color="#FF313131" />
	
	<SolidColorBrush x:Key="PulseBackBorder4Color" Color="#FF282828" />
	
	<SolidColorBrush x:Key="PulseBackBorderNavColor" Color="#FF5B5B5B" />
	
	<!--RTI Grey with 30% Alpha #4C6C6E70 -->
	<SolidColorBrush x:Key="RtiBorderGreyColor" Color="#FF2E2F2F" />
	<!--RTI Red with 30% Alpha #4CED1B23 -->
	<SolidColorBrush x:Key="RtiBorderRedColor" Color="#FF551618" />
	<SolidColorBrush x:Key="RtiBorderYellowColor" Color="#FF5C5902" />
	
	<SolidColorBrush x:Key="ClockFontColor" Color="#FFF5F6EB" />
	<SolidColorBrush x:Key="ClockBackgroundColor" Color="#FF0034C2" />
	
	<!--Settings Backgrounds-->
	<!--These will have Alpha values-->
	<SolidColorBrush x:Key="PulseSettingsBackground" Color="#E50C0A00" />
	<SolidColorBrush x:Key="PulseSettingsBackBorder1Color" Color="#BF252525" />
	<SolidColorBrush x:Key="PulseSettingsBackBorder2Color" Color="#BF141414" />
	<SolidColorBrush x:Key="PulseSettingsBackBorder3Color" Color="#BF313131" />
	<SolidColorBrush x:Key="PulseSettingsBackBorderBrush" Color="#BF372B2B" />
	
	<!--Orange Colors-->
	<LinearGradientBrush x:Key="PulseButtonBlackBackground" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FF1D1D1D" Offset="0"/>
		<GradientStop Color="#FF0E0E0E" Offset="1"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="PulseFontOrangeColor" Color="#FFFBC865" />
	
	<!--Status Colors-->
	<SolidColorBrush x:Key="PulseStatusSolidColorInit" Color="#FF6EBAD3" />
	<SolidColorBrush x:Key="PulseStatusSolidColorGood" Color="#FF92D36E" />
	<SolidColorBrush x:Key="PulseStatusSolidColorBad" Color="#FFFF5D55" />
	<SolidColorBrush x:Key="PulseStatusSolidColorWarning" Color="#FFE9F958" />
	<LinearGradientBrush x:Key="PulseStatusColorInit" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FF95D2F9" Offset="0"/>
		<GradientStop Color="#FF199CD9" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PulseStatusColorGood" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FFBEE04C" Offset="0"/>
		<GradientStop Color="#FF76B312" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PulseStatusColorBad" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FFF94241" Offset="0"/>
		<GradientStop Color="#FFE0090B" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PulseStatusColorWarning" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FFF7B771" Offset="0"/>
		<GradientStop Color="#FFF6883A" Offset="1"/>
	</LinearGradientBrush>
	<VisualBrush x:Key="PulseStatusIconInit" Visual="{StaticResource appbar_synchronize}" />
	<VisualBrush x:Key="PulseStatusIconGood" Visual="{StaticResource appbar_check}" />
	<VisualBrush x:Key="PulseStatusIconBad" Visual="{StaticResource appbar_close}" />
	<VisualBrush x:Key="PulseStatusIconWarning" Visual="{StaticResource appbar_warning}" />
	
	
	<!--Border Brush-->
	<SolidColorBrush x:Key="PulseBorderBrush1Color" Color="#FF372B2B" />
	
	<!-- Button Linear Gradiant -->
	<LinearGradientBrush x:Key="ButtonGradiant1" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="Black" Offset="0.194"/>
		<GradientStop Color="#FF807979"/>
		<GradientStop Color="#FF0E0C0C" Offset="0.862"/>
		<GradientStop Color="#FF807979" Offset="1"/>
	</LinearGradientBrush>
	
	<LinearGradientBrush x:Key="ButtonGradiant2" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Color="#00ffffff" Offset="1" />
		<GradientStop Color="#528dbdff" Offset="0" />
	</LinearGradientBrush>
	
	<LinearGradientBrush x:Key="ButtonGradiant" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Color="Black" Offset="1"/>
		<GradientStop Color="#FF373636"/>
	</LinearGradientBrush>
	
	<!-- Button Glow Linear Gradiant -->
	<LinearGradientBrush x:Key="ButtonGlowGradiant" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#008dbdff" Offset="1" />
		<GradientStop Color="#b28dbdff" Offset="0" />
	</LinearGradientBrush>
	
	<!-- Remove the Default Glow Effect on a button -->
	<Style x:Key="ButtonStyle" TargetType="Button">
		<Setter Property="Background" Value="{StaticResource ButtonGradiant}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border Name="border" BorderThickness="1" Padding="4,2" BorderBrush="DarkGray" CornerRadius="3" Background="{TemplateBinding Background}">
						<Grid >
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Name="content"/>
						</Grid>						
					</Border>
					<ControlTemplate.Triggers>
						<!-- Mouse over button -->
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="border" Property="Background" Value="{StaticResource ButtonGlowGradiant}" />
							<Setter TargetName="border" Property="BorderBrush" Value="#b28dbdff" />
							<Setter Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1.025" ScaleY="1.025" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<!-- Disable Button -->
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Opacity" Value="0.7" />
							<Setter TargetName="border" Property="Background" Value="#33787878" />
							<Setter TargetName="border" Property="BorderBrush" Value="#22787878"/>
						</Trigger>
						<!-- Is focused or Default Button -->
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="border" Property="BorderBrush" Value="DarkGray" />
						</Trigger>
						<!-- Button Pressed -->
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" >
								<Setter.Value>
									<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" >
										<GradientStop Color="#b28dbdff" Offset="0" />
										<GradientStop Color="#FF207BF9" Offset="1" />
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform" >
								<Setter.Value>
									<TranslateTransform Y="1.0" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--Simple Button Style that will move the button when pressed-->
	<Style x:Key="ButtonMoveStyle" TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<ContentPresenter Content="{TemplateBinding Content}"/>
					
					<ControlTemplate.Triggers>
						<!-- Mouse over button -->
						<!--Trigger Property="IsMouseOver" Value="True">
							<Setter Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1.1" ScaleY="1.1" />
								</Setter.Value>
							</Setter>
						</Trigger-->
						<!-- Button Pressed -->
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="RenderTransform" >
								<Setter.Value>
									<TranslateTransform Y="1.0" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- This storyboard will rotate the item -->
	<Storyboard x:Key="RotateStoryboard">
		<DoubleAnimation Storyboard.TargetName="AnimatedRotateTransform" 
			Storyboard.TargetProperty="Angle" 
			By="1"        
			To="360" 
			Duration="0:0:0.5" 
			FillBehavior="Stop" />
	 </Storyboard>
	

	<!--Simple Button Style that will move the button when pressed-->
	<Style x:Key="ToggleButtonMoveStyle" TargetType="ToggleButton">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<ContentPresenter Content="{TemplateBinding Content}"/>
					
					<ControlTemplate.Triggers>
						<!-- Mouse over button -->
						<!--Trigger Property="IsMouseOver" Value="True">
							<Setter Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1.1" ScaleY="1.1" />
								</Setter.Value>
							</Setter>
						</Trigger-->
						<!-- Button Pressed -->
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="RenderTransform" >
								<Setter.Value>
									<TranslateTransform Y="1.0" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--Large button glowing with background and foreground-->
	<Style TargetType="{x:Type Button}" x:Key="ButtonGlowingLarge">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="ButtonBorder" CornerRadius="2">
						<Border.Background>
							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
								<GradientStop Color="#FF1D1D1D" Offset="0"/>
								<GradientStop Color="#FF0E0E0E" Offset="1"/>
							</LinearGradientBrush>
						</Border.Background>
						<Border.Effect>
							<DropShadowEffect ShadowDepth="10" BlurRadius="0.5" Opacity="0.5" Color="#FF353434" />
						</Border.Effect>
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed"   Value="true">
							<Setter Property="Background" TargetName="ButtonBorder" Value="#FF454545" />
							<Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect ShadowDepth="10" BlurRadius="0.5" Opacity="0.5" Color="#FF353434" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" TargetName="ButtonBorder" Value="#FF686868" />
							<Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect ShadowDepth="10" BlurRadius="0.5" Opacity="0.5" Color="#FF353434" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Toggle Button with a glow when selected-->
	<Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonGlowing">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="ButtonBorder" CornerRadius="2">
						<Border.Background>
							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
								<GradientStop Color="#FF1D1D1D" Offset="0"/>
								<GradientStop Color="#FF0E0E0E" Offset="1"/>
							</LinearGradientBrush>
						</Border.Background>
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"   Value="true">
							<!--Setter Property="Background" TargetName="ButtonBorder" Value="#FF454545" /-->
                            <Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource PulseFontOrangeColor}" />
							<!--Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect ShadowDepth="10" BlurRadius="0.5" Opacity="0.5" Color="#FF353434" />
								</Setter.Value>
							</Setter-->
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<!--Setter Property="Background" TargetName="ButtonBorder" Value="#FF686868" /-->
							<Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource PulseFontOrangeColor}" />
							<!--Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect ShadowDepth="10" BlurRadius="0.5" Opacity="0.5" Color="#FF353434" />
								</Setter.Value>
							</Setter-->
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Toggle Button with a glow when selected-->
	<Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonGlowingBlue">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="ButtonBorder" CornerRadius="2">
						<Border.Background>
							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
								<GradientStop Color="#FF1D1D1D" Offset="0"/>
								<GradientStop Color="#FF0E0E0E" Offset="1"/>
							</LinearGradientBrush>
						</Border.Background>
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked"   Value="true">
							<!--Setter Property="Background" TargetName="ButtonBorder" Value="#FF454545" /-->
							<Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource ClockBackgroundColor}" />
							<!--Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect ShadowDepth="10" BlurRadius="0.5" Opacity="0.5" Color="#FF353434" />
								</Setter.Value>
							</Setter-->
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<!--Setter Property="Background" TargetName="ButtonBorder" Value="#FF686868" /-->
							<Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource PulseFontOrangeColor}" />
							<!--Setter Property="Effect">
								<Setter.Value>
									<DropShadowEffect ShadowDepth="10" BlurRadius="0.5" Opacity="0.5" Color="#FF353434" />
								</Setter.Value>
							</Setter-->
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>	
	
	<!--Stretch the plot to fill the row-->
	<Style x:Key="ListViewTimeSeriesStyle" TargetType="ListViewItem">
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Height" Value="{Binding Path=ViewModel.PlotHeight}" />
		<Setter Property="Width" Value="{Binding Path=ViewModel.PlotWidth}" />
		<Setter Property="Padding" Value="0" />
		
		<Style.Resources>
			<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#E50C0A00"/>
			<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#E50C0A00"/>
		</Style.Resources>
		
	</Style>

	<!-- Converter used to convert from OxyColor to SolidColorBrush -->
	<pulse_display:ColormapToBrushConverter x:Key="ColormapToBrushConverter" />
	
	<!-- Bool Converter-->
	<pulse_display:BoolToVisibleOrCollapsed x:Key="BoolToVisConverter"/>
	
	<!-- Converter used to convert from OxyColor to SolidColorBrush -->
	<pulse_display:OxyColorToBrushConverter x:Key="OxyColorToBrushConverter" />

    <!-- Converter used to convert from OxyPalette to SolidColorBrush -->
    <pulse_display:OxyPaletteToBrushConverter x:Key="OxyPaletteToBrushConverter" />

    <!-- Template to display colored rectangles in the combobox -->
	<DataTemplate x:Key="ColormapComboBox" DataType="ComboBox">
		<Rectangle Height="16" MinWidth="64" HorizontalAlignment="Center" Fill="{Binding Converter={StaticResource ColormapToBrushConverter}}" Stroke="Black" Margin="0,1,0,1" />
	</DataTemplate>
	
	<!-- Template to display rectangles in the combobox -->
	<DataTemplate x:Key="OxyColorComboBox" DataType="ComboBox">
		<Rectangle Height="16" MinWidth="64" HorizontalAlignment="Center" Fill="{Binding Converter={StaticResource OxyColorToBrushConverter}}" Stroke="Black" Margin="0,1,0,1" />
	</DataTemplate>

    <!-- Template to display rectangles in the combobox -->
    <DataTemplate x:Key="OxyPaletteComboBox" DataType="ComboBox">
        <Rectangle Height="16" MinWidth="64" HorizontalAlignment="Center" Fill="{Binding Converter={StaticResource OxyPaletteToBrushConverter}}" Stroke="Black" Margin="0,1,0,1" />
    </DataTemplate>

    <!--Sytle for the buttons on the Home Page-->
	<Style x:Key="HomePageButtonStyle" TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border Name="ButtonBorder" CornerRadius="10" BorderThickness="1" BorderBrush="#FF3E3E3E" Background="#FF3E3E3E">
						<ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1.1" ScaleY="1.1" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1.0" ScaleY="1.0" />
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="RenderTransformOrigin" Value="0.1,0.1" />
	</Style>
	
	<!--Sytle for the buttons on the Settings Page-->
	<Style x:Key="SettingsPageButtonStyle" TargetType="Button">
		<Setter Property="Background" Value="{StaticResource PulseBackBorder1Color}" />
		<Setter Property="Foreground" Value="{StaticResource PulseFontColor}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border Name="ButtonBorder" Background="{TemplateBinding Background}" CornerRadius="0" BorderBrush="#FF2E2E2E" BorderThickness="0,2">
						<ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{StaticResource PulseBackBorder2Color}" />
							<Setter Property="Foreground" Value="{StaticResource PulseFontHighlightColor}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{StaticResource PulseBackBorder2Color}" />
							<Setter Property="Foreground" Value="{StaticResource PulseFontHighlightColor}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter Property="Background" Value="{StaticResource PulseBackBorder2Color}" />
							<Setter Property="Foreground" Value="{StaticResource PulseFontHighlightColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="RenderTransformOrigin" Value="0.1,0.1" />
	</Style>

	<!-- Remove the Default Glow Effect on a button -->
	<Style x:Key="LoadButtonStyle" TargetType="Button">
		<Setter Property="Background" Value="#FFD94D4C" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border Name="border" BorderThickness="10" Padding="4,2" BorderBrush="DarkGray" CornerRadius="3" Background="{TemplateBinding Background}">
						<Grid >
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Name="content" Content="{TemplateBinding Content}"/>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<!-- Mouse over button -->
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="#FFD94D4C" />
				<Setter Property="RenderTransform">
					<Setter.Value>
						<ScaleTransform ScaleX="1.1" ScaleY="1.1" />
					</Setter.Value>
				</Setter>
			</Trigger>
			<!-- Disable Button -->
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.7" />
				<Setter Property="Foreground" Value="Gray" />
				<Setter Property="Background" Value="#33787878" />
			</Trigger>
			<!-- Is focused or Default Button -->
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="#FFD94D4C" />
			</Trigger>
			<!-- Button Pressed -->
			<Trigger Property="IsPressed" Value="True">                   
				<Setter Property="RenderTransform" >
					<Setter.Value>
						<ScaleTransform ScaleX="1.0" ScaleY="1.0" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!--ScrollViewer-->
	<Style TargetType="{x:Type ScrollViewer}">
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!--ItemsControl that uses a WrapPanel to list all the items-->
	<Style x:Key="ItemsControlWrapPanel" TargetType="{x:Type ItemsControl}">
		<!-- Swap out the default items panel with a WrapPanel so that the images will be arranged with a different layout. -->
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<WrapPanel />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<!-- Set this attached property to 'Disabled' so that the
		ScrollViewer in the ListBox will never show a horizontal
		scrollbar, and the WrapPanel it contains will be constrained
		to the width of the ScrollViewer's viewable surface. -->
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
	</Style>
	
	<!--Progressbar Metro Style-->
	<Style x:Key="ProgressBarStyleMetro" TargetType="{x:Type ProgressBar}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid MinHeight="14" MinWidth="200">
						<Border Name="PART_Track" CornerRadius="2" Background="{StaticResource PulseBackBorder2Color}" BorderBrush="Black" BorderThickness="1" />
						<Border Name="PART_Indicator" CornerRadius="2" Background="{StaticResource PulseBackBorder3Color}" BorderBrush="Black" BorderThickness="1" HorizontalAlignment="Left" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Progressbar Metro Style Warning Indicator Yellow-->
	<Style x:Key="ProgressBarStyleMetroWarning" TargetType="{x:Type ProgressBar}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid MinHeight="14" MinWidth="200">
						<Border Name="PART_Track" CornerRadius="2" Background="{StaticResource PulseBackBorder2Color}" BorderBrush="Black" BorderThickness="1" />
						<Border Name="PART_Indicator" CornerRadius="2" Background="{StaticResource RtiBorderYellowColor}" BorderBrush="Black" BorderThickness="1" HorizontalAlignment="Left" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--Progressbar Metro Style Bad Indicator Red-->
	<Style x:Key="ProgressBarStyleMetroBad" TargetType="{x:Type ProgressBar}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid MinHeight="14" MinWidth="200">
						<Border Name="PART_Track" CornerRadius="2" Background="{StaticResource PulseBackBorder2Color}" BorderBrush="Black" BorderThickness="1" />
						<Border Name="PART_Indicator" CornerRadius="2" Background="{StaticResource RtiBorderRedColor}" BorderBrush="Black" BorderThickness="1" HorizontalAlignment="Left" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <!-- Used to simulate toggle buttons with a listview -->
    <Style x:Key="ListViewToggleButtonStyle" TargetType="{x:Type ListView}">
        <Style.Resources>
            <!-- Background of selected item when focussed -->
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FF1F1F39" />
            <!-- Background of selected item when not focussed -->
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#FF1F1F39" />
        </Style.Resources>
        <Setter Property="ListView.ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ToggleButton Content="{Binding}" IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Margin="5" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--List Box with Toggle Buttons-->
	<Style x:Key="ToggleButtonListBox" TargetType="{x:Type ListBox}">
		<Setter Property="ListBox.ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<ToggleButton Content="{Binding}" IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ListBox.ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<StackPanel Orientation="Horizontal" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="0" />
	</Style>
	
	<!--List Box with Toggle Buttons Vertically-->
	<Style x:Key="ToggleButtonListBoxAdcpConnection" TargetType="{x:Type ListBox}">
	    <Setter Property="ListBox.ItemTemplate">
	        <Setter.Value>
	            <DataTemplate>
	                <ToggleButton IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}"  ToolTip="{Binding ToolTip}" Background="RoyalBlue" Height="50" Width="50" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" >
						<StackPanel>
	                		<Viewbox Width="25" Height="25">
								<Image Source="{Binding Image}" />
							</Viewbox>
							<TextBlock Text="{Binding Display}" FontSize="8" HorizontalAlignment="Center" />
						</StackPanel>
					</ToggleButton>
	            </DataTemplate>
	        </Setter.Value>
	    </Setter>
		<Setter Property="ListBox.ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<StackPanel Orientation="Vertical" Background="Black" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="BorderBrush" Value="Black" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True" >
				<Setter Property="Background" Value="Black" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="BorderBrush" Value="Black" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!--Radio Button that looks like Toggle Button-->
    <Style x:Key="RadioButtonToggleButton" TargetType="{x:Type RadioButton}">
        <Setter Property="RadioButton.Template">
            <Setter.Value>
                <ControlTemplate>
                    <ToggleButton IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Background="RoyalBlue"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--Background Colors-->
        <Setter Property="Background" Value="RoyalBlue" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True" >
                <Setter Property="Background" Value="Orange" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter Property="Background" Value="{StaticResource PulseBackBorder3Color}" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--A listbox that will act like a TabPanel-->
	<!--The Tab name will be taken from the object's Display property-->
	<Style x:Key="ListBoxLikeTabPanel" TargetType="{x:Type ListBox}">
		<Style.Resources> 
	        <!-- Background of selected item when focussed --> 
	        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" 
	                         Color="Transparent"/> 
	        <!-- Background of selected item when not focussed --> 
	        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" 
	                         Color="Transparent" /> 
	    </Style.Resources>
		
		<!--Limit height-->
		<Setter Property="Height" Value="35" />
		
		<!--No Border or background-->
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Background" Value="Transparent" />
		
		<!--No ScrollViewers-->
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
		
		<!--Boxes with Display text-->
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<!--Display the title for the tab-->
					<Border x:Name="listItem" Background="{StaticResource PulseBackBorder2Color}">
						<TextBlock Text="{Binding Display}" Margin="5" />
					</Border>
					
					<!--Change the color of the selected item from listbox-->
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListBoxItem}},Path=IsSelected}" Value="True">
							<Setter TargetName="listItem" Property="Background" Value="{StaticResource RtiBorderRedColor}" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<!--Horizontal orientation-->
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
		            <VirtualizingStackPanel Orientation="Horizontal" />
		        </ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<!--Spacing between items-->
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListBoxItem}">
	                <Setter Property="Padding" Value="3"></Setter>
	            </Style>
			</Setter.Value>
		</Setter>		
	</Style>
	
	<!--A listbox that will act like a TabPanel-->
	<!--The Tab name will be taken from the object's Display property-->
	<!--These tabs will contain icons and Display-->
	<Style x:Key="ListBoxLikeTabPanelWithIcons" TargetType="{x:Type ListBox}">
		<Style.Resources> 
	        <!-- Background of selected item when focused --> 
	        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/> 
	        <!-- Background of selected item when not focused --> 
	        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
            <!-- Background of selected item when not focused -->
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent" />
	    </Style.Resources>
		
		<!--Limit height-->
		<Setter Property="Height" Value="35" />
		
		<!--No Border or background-->
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Background" Value="Transparent" />
		
		<!--No ScrollViewers-->
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
		
		<!--Boxes with Display text-->
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<!--Display the title for the tab-->
					<Border x:Name="listItem" Background="{StaticResource RtiBorderGreyColor}" Height="20" Width="60">
						<StackPanel Orientation="Horizontal">
							<Rectangle Width="15" Height="15" Visibility="{Binding Path=IsSerial, Converter={StaticResource BoolToVisConverter}}" >
			                    <Rectangle.Fill>
			                        <VisualBrush Visual="{StaticResource pulse}" />
			                    </Rectangle.Fill>
			                </Rectangle>
							<Rectangle Width="15" Height="15" Visibility="{Binding Path=IsPlayback, Converter={StaticResource BoolToVisConverter}}" >
			                    <Rectangle.Fill>
			                        <VisualBrush Visual="{StaticResource document}" />
			                    </Rectangle.Fill>
			                </Rectangle>
                            <Rectangle Width="15" Height="15" Visibility="{Binding Path=IsSta, Converter={StaticResource BoolToVisConverter}}" >
                                <Rectangle.Fill>
                                    <VisualBrush Visual="{StaticResource STA}" />
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle Width="15" Height="15" Visibility="{Binding Path=IsLta, Converter={StaticResource BoolToVisConverter}}" >
                                <Rectangle.Fill>
                                    <VisualBrush Visual="{StaticResource LTA}" />
                                </Rectangle.Fill>
                            </Rectangle>
                            <TextBlock Text="{Binding Display}" Margin="5" FontSize="8" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Button Command="{Binding CloseVMCommand}" BorderBrush="Transparent" Height="19" Width="19" Background="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Rectangle Width="9" Height="9">
                                    <Rectangle.Fill>
                                        <VisualBrush Visual="{StaticResource remove_white}" />
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Button>
                        </StackPanel>
					</Border>
					
					<!--Change the color of the selected Tab-->
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListBoxItem}},Path=IsSelected}" Value="True">
                            <Setter TargetName="listItem" Property="Background" Value="{StaticResource PulseFontHighlightColor }" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<!--Horizontal orientation-->
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
		            <VirtualizingStackPanel Orientation="Horizontal" />
		        </ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<!--Spacing between items-->
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Padding" Value="3" />
                </Style>
			</Setter.Value>
		</Setter>		
	</Style>
	
	<LinearGradientBrush x:Key="ProgressBarBorderBrush"
                     EndPoint="0,1"
                     StartPoint="0,0">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#B2B2B2"
                      Offset="0"/>
        <GradientStop Color="#8C8C8C"
                      Offset="1"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>
<LinearGradientBrush x:Key="ProgressBarBackground"
                     EndPoint="1,0"
                     StartPoint="0,0">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#BABABA"
                      Offset="0"/>
        <GradientStop Color="#C7C7C7"
                      Offset="0.5"/>
        <GradientStop Color="#BABABA"
                      Offset="1"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>
<LinearGradientBrush x:Key="ProgressBarTopHighlight"
                     StartPoint="0,0"
                     EndPoint="0,1">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#80FFFFFF"
                      Offset="0.05"/>
        <GradientStop Color="#00FFFFFF"
                      Offset="0.25"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>
<LinearGradientBrush x:Key="ProgressBarGlassyHighlight"
                     StartPoint="0,0"
                     EndPoint="0,1">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#50FFFFFF"
                      Offset="0.5385"/>
        <GradientStop Color="#00FFFFFF"
                      Offset="0.5385"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>
<LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight"
                     StartPoint="0,0"
                     EndPoint="0,1">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#90FFFFFF"
                      Offset="0.5385"/>
        <GradientStop Color="#00FFFFFF"
                      Offset="0.5385"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>
<RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft"
                     RadiusX="1"
                     RadiusY="1"
                     RelativeTransform="1,0,0,1,0.5,0.5">
    <RadialGradientBrush.GradientStops>
        <GradientStop Color="#60FFFFC4"
                      Offset="0"/>
        <GradientStop Color="#00FFFFC4"
                      Offset="1"/>
    </RadialGradientBrush.GradientStops>
</RadialGradientBrush>
<LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect"
                     StartPoint="0,1"
                     EndPoint="0,0">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#60FFFFC4"
                      Offset="0"/>
        <GradientStop Color="#00FFFFC4"
                      Offset="1"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>
<RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight"
                     RadiusX="1"
                     RadiusY="1"
                     RelativeTransform="1,0,0,1,-0.5,0.5">
    <RadialGradientBrush.GradientStops>
        <GradientStop Color="#60FFFFC4"
                      Offset="0"/>
        <GradientStop Color="#00FFFFC4"
                      Offset="1"/>
    </RadialGradientBrush.GradientStops>
</RadialGradientBrush>

<LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft"
                     StartPoint="0,0"
                     EndPoint="1,0">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#0C000000"
                      Offset="0"/>
        <GradientStop Color="#20000000"
                      Offset="0.3"/>
        <GradientStop Color="#00000000"
                      Offset="1"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>
<LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight"
                     StartPoint="0,0"
                     EndPoint="1,0">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#00000000"
                      Offset="0"/>
        <GradientStop Color="#20000000"
                      Offset="0.7"/>
        <GradientStop Color="#0C000000"
                      Offset="1"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>

<LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" 
                     StartPoint="0,0"
                     EndPoint="1,0">
    <LinearGradientBrush.GradientStops>
        <GradientStop Color="#00FFFFFF"
                      Offset="0"/>
        <GradientStop Color="#60FFFFFF"
                      Offset="0.4"/>
        <GradientStop Color="#60FFFFFF"
                      Offset="0.6"/>
        <GradientStop Color="#00FFFFFF"
                      Offset="1"/>
    </LinearGradientBrush.GradientStops>
</LinearGradientBrush>

    <Style x:Key="CustomProgressBar"
       TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground"
            Value="#01D328"/>
        <Setter Property="Background"
            Value="{StaticResource ProgressBarBackground}"/>
        <Setter Property="BorderBrush"
            Value="{StaticResource ProgressBarBorderBrush}"/>
        <Setter Property="BorderThickness"
            Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid Name="TemplateRoot"
                      SnapsToDevicePixels="true">
                        <Rectangle Fill="{TemplateBinding Background}"
                               RadiusX="2"
                               RadiusY="2"/>
                        <Border Background="{StaticResource ProgressBarGlassyHighlight}"
                            Margin="1"
                            CornerRadius="2"/>
                        <Border BorderBrush="#80FFFFFF"
                            Background="{StaticResource ProgressBarTopHighlight}"
                            BorderThickness="1,0,1,1"
                            Margin="1"/>
                        <Rectangle Name="PART_Track"
                               Margin="1"/>

                        <Decorator x:Name="PART_Indicator"
                               HorizontalAlignment="Left"
                               Margin="1">
                            <Grid Name="Foreground">
                                <Rectangle x:Name="Indicator"
                                       Fill="{TemplateBinding Foreground}"/>
                                <Grid x:Name="Animation" ClipToBounds="true">
                                    <Rectangle x:Name="PART_GlowRect" Width="100" 
                                            Fill="{StaticResource ProgressBarIndicatorAnimatedFill}"
                                            Margin="-100,0,0,0"
                                            HorizontalAlignment="Left">
                                    </Rectangle>
                                </Grid>
                                <Grid x:Name="Overlay">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="15"/>
                                        <ColumnDefinition Width="0.1*"/>
                                        <ColumnDefinition MaxWidth="15"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Rectangle x:Name="LeftDark"
                                           Grid.RowSpan="2"
                                           Fill="{StaticResource ProgressBarIndicatorDarkEdgeLeft}"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Margin="1,1,0,1"/>
                                    <Rectangle x:Name="RightDark"
                                           Grid.RowSpan="2"
                                           Grid.Column="2"
                                           RadiusX="1"
                                           RadiusY="1"
                                           Fill="{StaticResource ProgressBarIndicatorDarkEdgeRight}"
                                           Margin="0,1,1,1"/>
                                    <Rectangle x:Name="LeftLight"
                                           Grid.Column="0"
                                           Grid.Row="2"
                                           Fill="{StaticResource ProgressBarIndicatorLightingEffectLeft}"/>
                                    <Rectangle x:Name="CenterLight"
                                           Grid.Column="1"
                                           Grid.Row="2"
                                           Fill="{StaticResource ProgressBarIndicatorLightingEffect}"/>
                                    <Rectangle x:Name="RightLight"
                                           Grid.Column="2"
                                           Grid.Row="2"
                                           Fill="{StaticResource ProgressBarIndicatorLightingEffectRight}"/>
                                    <Border x:Name="Highlight1"
                                        Grid.RowSpan="2"
                                        Grid.ColumnSpan="3"
                                        Background="{StaticResource ProgressBarIndicatorGlassyHighlight}"/>
                                    <Border x:Name="Highlight2"
                                        Grid.RowSpan="2" 
                                        Grid.ColumnSpan="3"
                                        Background="{StaticResource ProgressBarTopHighlight}"/>
                                </Grid>
                            </Grid>
                        </Decorator>

                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation"
                             Value="Vertical">
                            <Setter TargetName="TemplateRoot"
                                Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsIndeterminate"
                             Value="true">
                            <Setter TargetName="LeftDark"
                                Property="Visibility"
                                Value="Collapsed"/>
                            <Setter TargetName="RightDark"
                                Property="Visibility"
                                Value="Collapsed"/>
                            <Setter TargetName="LeftLight"
                                Property="Visibility"
                                Value="Collapsed"/>
                            <Setter TargetName="CenterLight"
                                Property="Visibility"
                                Value="Collapsed"/>
                            <Setter TargetName="RightLight"
                                Property="Visibility"
                                Value="Collapsed"/>
                            <Setter TargetName="Indicator"
                                Property="Visibility"
                                Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsIndeterminate"
                             Value="false">
                            <Setter TargetName="Animation"
                                Property="Background"
                                Value="#80B5FFA9"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    


    <!--WPF Extended Toolkit DateTimePicker style-->
	<!--http://stackoverflow.com/questions/560811/how-to-use-datetimepicker-in-wpf-->
	<!--rti:TimeFormatToDateTimeFormatConverter x:Key="TimeFormatToDateTimeFormatConverter" />
	<Style x:Key="PulseDateTimePickerStyle" TargetType="{x:Type extToolkit:DateTimePicker}">
            <Setter Property="TimeWatermarkTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Content="{Binding}" Foreground="Gray" Focusable="False"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="WatermarkTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Content="{Binding}" Foreground="Gray" Focusable="False"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type extToolkit:DateTimePicker}">
                        <Border>
                            <Grid>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <extToolkit:DateTimeUpDown AllowSpin="{TemplateBinding AllowSpin}" 
                                                                  BorderThickness="1,1,0,1" 
                                                                  FormatString="{TemplateBinding FormatString}" 
                                                                  Format="{TemplateBinding Format}" 
                                                                  ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" 
                                                                  Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                  WatermarkTemplate="{TemplateBinding WatermarkTemplate}" 
                                                                  Watermark="{TemplateBinding Watermark}" 
                                                                  Foreground="#FFEFE3E3" 
                                                                  BorderBrush="#FFEBB31A" >
                                    </extToolkit:DateTimeUpDown>

                                    <ToggleButton x:Name="_calendarToggleButton" Background="{x:Null}" Grid.Column="1" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                        <ToggleButton.IsHitTestVisible>
                                            <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <rti:InverseBoolConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </ToggleButton.IsHitTestVisible>
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Grid SnapsToDevicePixels="True">
                                                                <theme:ButtonChrome x:Name="ToggleButtonChrome" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" BorderBrush="{x:Null}" Background="{StaticResource PulseSettingsBackBorder3Color}" />
                                                                <Grid>
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="*"/>
                                                                        <ColumnDefinition Width="Auto"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                                    <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                                        <Path Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Fill="#FF82E511" Height="4" Width="7"/>
                                                                    </Grid>
                                                                </Grid>
                                                            </Grid>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                </Grid>

                                <Popup IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False">
                                    <Border BorderThickness="1" Padding="3" BorderBrush="Black" Background="{StaticResource PulseSettingsBackBorder2Color}">
                                        <StackPanel Background="{x:Null}">
                                            <Calendar x:Name="Part_Calendar" BorderThickness="0" DisplayDate="2011-06-28" Background="{StaticResource PulseSettingsBackBorder1Color}"/>
                                            <extToolkit:TimePicker x:Name="Part_TimeUpDown" Format="ShortTime" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}" Watermark="{TemplateBinding TimeWatermark}" Background="{x:Null}" Foreground="{StaticResource PulseFontColor}">
                                            	<extToolkit:TimePicker.Style>
                                            		<Style TargetType="extToolkit:TimePicker">
														<Setter Property="Template">
															<Setter.Value>
															<ControlTemplate TargetType="extToolkit:TimePicker">
												               <Border>
												                  <Grid>
												                     <Grid>
												                        <Grid.ColumnDefinitions>
												                           <ColumnDefinition Width="*" />
												                           <ColumnDefinition Width="Auto" />
												                        </Grid.ColumnDefinitions>
												                        <extToolkit:TimePicker x:Name="PART_TimeUpDown" 
												                                                BorderThickness="1,1,0,1"
												                                                Background="Orange"
												                                                Foreground="{TemplateBinding Foreground}"
												                                                ContextMenu="{TemplateBinding ContextMenu}"
												                                                AllowSpin="{TemplateBinding AllowSpin}"
												                                                Format="{TemplateBinding Format, Converter={StaticResource TimeFormatToDateTimeFormatConverter}}"
												                                                FormatString="{TemplateBinding FormatString}"
												                                                ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
												                                                Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
												                                                Watermark="{TemplateBinding Watermark}"
												                                                WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
												                        <ToggleButton x:Name="_timePickerToggleButton"
												                                      Grid.Column="1"
												                                      IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
												                                      Style="{StaticResource TimePickerToggleButtonStyle}"
												                                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
												                     </Grid>
												                     <Popup IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
												                            StaysOpen="False">
												                        <Border BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}" BorderBrush="{StaticResource PopupDarkBorderBrush}">
												                           <Grid>
												                              <ListBox x:Name="PART_TimeListItems"
												                                       BorderThickness="0"
												                                       Width="150"
												                                       Height="130"
												                                       DisplayMemberPath="Display"
												                                       ItemContainerStyle="{StaticResource TimeItemStyle}" />
												                           </Grid>
												                        </Border>
												                     </Popup>
												                  </Grid>
												               </Border>
												            </ControlTemplate>
															</Setter.Value>
														</Setter>
													</Style>                               		                             	
												</extToolkit:TimePicker.Style>
											</extToolkit:TimePicker>
                                        </StackPanel>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


			
		<Style x:Key="TimeItemStyle" TargetType="ListBoxItem">
               <Setter Property="Template">
                  <Setter.Value>
                     <ControlTemplate TargetType="ListBoxItem">
                        <Border Name="Border" SnapsToDevicePixels="true">
                           <ContentPresenter Margin="4" />
                        </Border>
                        <ControlTemplate.Triggers>
                           <Trigger Property="IsMouseOver" Value="True">
                              <Setter TargetName="Border" Property="Background" Value="{StaticResource ListItemHover}" />
                           </Trigger>
                           <Trigger Property="IsSelected" Value="True">
                              <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                              <Setter Property="Foreground" Value="White" />
                           </Trigger>
                        </ControlTemplate.Triggers>
                     </ControlTemplate>
                  </Setter.Value>
               </Setter>
            </Style-->


	<!--ScrollViewer-->
	<!--http://codeoverload.wordpress.com/2011/11/26/custom-scrollbars-in-wpf/-->
	<!--Style x:Key="myScrollBarStyle" TargetType="{x:Type ScrollBar}">
	    <Style.Triggers>
	        <Trigger Property="IsMouseOver" Value="True">
	            <Setter Property="Opacity" Value="0.9" />
	        </Trigger>
	        <Trigger Property="IsMouseOver" Value="False">
	            <Setter Property="Opacity" Value="0.4" />
	        </Trigger>
	    </Style.Triggers>
	</Style>
	<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="HorizontalThumb" TargetType="{x:Type Thumb}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="4" />
							<ColumnDefinition Width="4" />
							<ColumnDefinition />
							<ColumnDefinition Width="4" />
							<ColumnDefinition Width="4" />
						</Grid.ColumnDefinitions>
						<Ellipse Grid.Column="0" Grid.ColumnSpan="2" Fill="#FFF4F4F5" />
						<Rectangle Grid.Column="1" Grid.ColumnSpan="3" Fill="#FFF4F4F5" />
						<Ellipse Grid.Column="3" Grid.ColumnSpan="2" Fill="#FFF4F4F5" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="VerticalThumb" TargetType="{x:Type Thumb}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="4" />
							<RowDefinition Height="4" />
							<RowDefinition />
							<RowDefinition Height="4" />
							<RowDefinition Height="4" />
						</Grid.RowDefinitions>
						<Ellipse Grid.Row="0" Grid.RowSpan="2" Fill="#FFF4F4F5" />
						<Rectangle Grid.Row="1" Grid.RowSpan="3" Fill="#FFF4F4F5" />
						<Ellipse Grid.Row="3" Grid.RowSpan="2" Fill="#FFF4F4F5" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Width" Value="10"/>
		<Setter Property="MinWidth" Value="10"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid x:Name="Bg" SnapsToDevicePixels="true" Background="#7FBFBFBF">
						<Grid.RowDefinitions>
							<RowDefinition Height="0.00001*"/>
						</Grid.RowDefinitions>
						<Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarPageButton}"/>
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarPageButton}"/>
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{DynamicResource VerticalThumb}" theme:ScrollChrome.ScrollGlyph="VerticalGripper" Width="8"/>
							</Track.Thumb>
						</Track>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto"/>
				<Setter Property="MinWidth" Value="0"/>
				<Setter Property="Height" Value="10"/>
				<Setter Property="MinHeight" Value="10"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="Bg" SnapsToDevicePixels="true" Background="#7FA7A7A7">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="0.00001*"/>
								</Grid.ColumnDefinitions>
								<Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarPageButton}"/>
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarPageButton}"/>
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb theme:ScrollChrome.ScrollGlyph="HorizontalGripper" Style="{DynamicResource HorizontalThumb}" Height="8"/>
									</Track.Thumb>
								</Track>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="{x:Type ScrollViewer}">
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
			</Trigger>
		</Style.Triggers>
	</Style-->
		
</ResourceDictionary>